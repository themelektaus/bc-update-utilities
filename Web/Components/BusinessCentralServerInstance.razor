@inherits AppComponent

<div data-group="@groupTitle">
    <div class="field">
        <label>Nav Admin Tool</label>
        <select class="interactable" value="@serverInstance.navAdminTool" @onchange="OnChange_NavAdminTool">
            <option></option>
            @foreach (var navAdminTool in serverInstance.remoteMachine.navAdminTools)
            {
                <option value="@navAdminTool">
                    ..@navAdminTool[Config.BC.NAV_PATH.Length..]
                </option>
            }
        </select>
    </div>
    <div class="field">
        <label>Name</label>
        @if (creationMode)
        {
            <Input @bind-value="serverInstance.name" onChange="OnChange_Name" />
        }
        else if (serverInstance.names.Count == 0)
        {
            <select disabled>
                <option>@serverInstance.name</option>
            </select>
        }
        else
        {
            <select class="interactable" value="@serverInstance.name" @onchange="OnChange_Name">
                <option></option>
                @foreach (var name in serverInstance.names)
                {
                    <option>@name</option>
                }
            </select>
        }
    </div>
</div>

@code {

    [Parameter] public string groupTitle { get; set; }

    [Parameter] public Config_ServerInstance serverInstance { get; set; }

    [Parameter] public bool creationMode { get; set; }

    [Parameter] public EventCallback onChange { get; set; }

    protected override Task OnInitializedAsync()=> Run(async () =>
    {
        await FetchServerInstanceNamesAsync();
    });

    Task OnChange_NavAdminTool(ChangeEventArgs e) => Run(async () =>
    {
        var newValue = e.Value?.ToString() ?? string.Empty;

        if (serverInstance.navAdminTool != newValue)
        {
            serverInstance.navAdminTool = newValue;
            await FetchServerInstanceNamesAsync();
        }

        await onChange.InvokeAsync();

        Refresh();
    });

    async Task FetchServerInstanceNamesAsync()
    {
        await serverInstance.FetchServerInstanceNamesAsync();

        if (!creationMode)
        {
            if (serverInstance.names.Count > 0)
            {
                if (!serverInstance.names.Contains(serverInstance.name))
                {
                    serverInstance.name = string.Empty;
                }
            }
        }
    }

    async Task OnChange_Name(ChangeEventArgs e)
    {
        serverInstance.name = e.Value.ToString();

        await onChange.InvokeAsync();

        Refresh();
    }

}
