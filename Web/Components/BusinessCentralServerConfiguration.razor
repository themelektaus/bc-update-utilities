@inherits AppComponent

<div class="table">
    <InputSearch @bind-value="searchText" isEnabled="fixedSearchText is null" />
    <div class="table-section table-section-header">
        <div>
            <div>Key</div>
            @if (isReadonly)
            {
                <div>Value</div>
            }
            else
            {
                <div>Original Value</div>
                <div style="margin-left: 1em; ">New Value</div>
                <div></div>
            }
        </div>
    </div>
    <div class="table-section table-section-content">
        @foreach (var entryInfo in GetEntryInfos())
        {
            <div class="@(entryInfo.isDirty ? "dirty" : "")">
                <div>@entryInfo.entry.key</div>
                <div>@entryInfo.entry.value</div>
                @if (!isReadonly)
                {
                    <div>
                        @if (entryInfo.editValue is not null)
                        {
                            <Input @bind-value="entryInfo.editValue" />
                        }
                        else
                        {
                            @if (entryInfo.isDirty)
                            {
                                <div style="padding: 0 .75em; ">@entryInfo.newValue</div>
                            }
                        }
                    </div>
                    <div style="text-align: right; ">
                        @if (entryInfo.editValue is not null)
                        {
                            <Button onClick="() => Save(entryInfo)" styleClass="positive">Save</Button>
                            <Button onClick="() => Cancel(entryInfo)">Cancel</Button>
                        }
                        else
                        {
                            <Button onClick="() => Edit(entryInfo)" styleClass="bc-conf-edit">Edit</Button>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>
@if (isReadonly)
{
    <style>
        .table-section-header {
            padding-right: .25em;
        }
        .table-section > div {
            grid-template-columns: 1fr 1fr;
            height: 2em;
        }
    </style>
}
else
{
    <style>
        .table-section-header {
            padding-right: 2.75em;
        }
        .table-section > div {
            grid-template-columns: 2fr 1fr 1fr 10em;
        }
    </style>
}
<style>
    .table {
        flex: 1;
        overflow: hidden;
    }
    .table-section-content > .dirty {
        color: orange
    }
    .table-section-content > div .bc-conf-edit {
        visibility: hidden;
    }
    .table-section-content > div:hover .bc-conf-edit {
        visibility: visible;
    }
</style>

@code {

    [Parameter] public Config.BC.RemoteMachine.ServerInstance serverInstance { get; set; }

    [Parameter] public string fixedSearchText { get; set; }
    [Parameter] public bool isReadonly { get; set; }

    public class EntryInfo
    {
        public Config.BC.RemoteMachine.ServerInstance.ConfigEntry entry;
        public string newValue;
        public bool isDirty => entry.value != newValue;
        public string editValue;
    }
    public readonly List<EntryInfo> entryInfos = new();

    string searchText = string.Empty;

    IEnumerable<EntryInfo> GetEntryInfos()
    {
        if (!searchText.IsValidPattern(out var ignoreCase))
        {
            return [];
        }

        return entryInfos.Where(x =>
        {
            if (x.entry.key.SearchMatch(searchText, ignoreCase))
                return true;

            if (x.entry.value.SearchMatch(searchText, ignoreCase))
                return true;

            if (x.newValue.SearchMatch(searchText, ignoreCase))
                return true;

            return false;

        }).OrderByDescending(x => x.isDirty);
    }

    protected override Task OnInitializedAsync() => RefreshAsync();

    public Task RefreshAsync() => Run(async () =>
    {
        if (fixedSearchText is not null)
        {
            searchText = fixedSearchText;
        }

        serverInstance.configuration.Clear();
        entryInfos.Clear();

        var navSession = await serverInstance.GetNavSessionAsync();

        if (navSession is not null)
        {
            var result = await navSession.RunScriptAsync(
                $"Get-NAVServerConfiguration -ServerInstance \"{serverInstance.name}\""
            );

            if (!result.HasErrors)
            {
                dynamic list = result.returnValue.Single().BaseObject;

                if (list is not null)
                {
                    foreach (dynamic @object in list)
                    {
                        var entry = new Config.BC.RemoteMachine.ServerInstance.ConfigEntry
                        {
                            key = @object.key as string,
                            value = @object.value as string
                        };
                        serverInstance.configuration.Add(entry);

                        entryInfos.Add(new()
                        {
                            entry = @entry,
                            newValue = @entry.value,
                        });
                    }
                }
            }
        }
    });

    void Edit(EntryInfo entryInfo)
    {
        entryInfo.editValue = entryInfo.newValue;

        this.RenderLater();
    }

    void Save(EntryInfo entryInfo)
    {
        entryInfo.newValue = entryInfo.editValue;

        Cancel(entryInfo);
    }

    void Cancel(EntryInfo entryInfo)
    {
        entryInfo.editValue = null;

        this.RenderLater();
    }

    Task Apply() => Run(async () =>
    {
        foreach (var entryInfo in entryInfos)
        {
            if (entryInfo.isDirty)
            {
                var navSession = await serverInstance.GetNavSessionAsync();

                if (navSession is not null)
                {
                    var result = await navSession.RunScriptAsync(
                        $"Set-NAVServerConfiguration -ServerInstance \"{serverInstance}\"" +
                        $" -KeyName \"{entryInfo.entry.key}\" -KeyValue \"{entryInfo.newValue}\""
                    );

                    if (!result.HasErrors)
                    {
                        entryInfo.entry.value = entryInfo.newValue;
                    }
                }
            }
        }

        await RefreshAsync();
    });

}
