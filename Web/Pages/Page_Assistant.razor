
@switch (step)
{
    case 1:
        <AssistantPage>
            <Title>Welcome</Title>
            <Body>
                There is no content yet on this page.
            </Body>
            <BottomLeft><Button isEnabled="false">Back</Button></BottomLeft>
            <BottomRight><Button onClick="Next">Next</Button></BottomRight>
        </AssistantPage>
        break;

    case 2:
        <AssistantPage>
            <Title>Connect to BC Server</Title>
            <Body>
                <div class="field">
                    <label>Hostname</label>
                    <Input @bind-value="bc.remoteMachine.hostname" />
                </div>
                <div class="field">
                    <label>Username</label>
                    <Input @bind-value="bc.remoteMachine.username" />
                </div>
                <div class="field">
                    <label>Password</label>
                    <Input @bind-value="bc.remoteMachine.password" type="password" />
                </div>
            </Body>
            <BottomLeft><Button onClick="Back">Back</Button></BottomLeft>
            <Bottom>
                @if (hasConnectionToRemoteMachine)
                {
                    <Button onClick="DisconnectFromRemoteMachine">Disconnect</Button>
                }
                else
                {
                    <Button onClickAsync="ConnectToRemoteMachineAsync">Connect</Button>
                }
            </Bottom>
            <BottomRight>
                <Button onClick="Next"
                        isEnabled="hasConnectionToRemoteMachine">
                    Next
                </Button>
            </BottomRight>
        </AssistantPage>
        break;
        
    case 3:
        <AssistantPage>
            <Title>Services</Title>
            <Body>
                @foreach (var service in services)
                {
                    <div>@service.ServiceType</div>
                }
            </Body>
            <BottomLeft><Button onClick="Back">Back</Button></BottomLeft>
            <Bottom>
                <Button onClickAsync="GetServicesFromRemoteMachine">Get Services</Button>
            </Bottom>
            <BottomRight><Button onClick="Next">Next</Button></BottomRight>
        </AssistantPage>
        break;

    case 4:
        <AssistantPage>
            <Title>Old BC Instance</Title>
            <Body>
                <div class="field">
                    <label>Name</label>
                    <Input @bind-value="Config.Instance.bc.oldInstanceName" />
                </div>
            </Body>
            <BottomLeft><Button onClick="Back">Back</Button></BottomLeft>
            <BottomRight><Button onClick="Next">Next</Button></BottomRight>
        </AssistantPage>
        break;

    case 5:
        <AssistantPage>
            <Title>New BC Instance</Title>
            <Body>
                <div class="field">
                    <label>Name</label>
                    <Input @bind-value="Config.Instance.bc.newInstanceName" />
                </div>
            </Body>
            <BottomLeft><Button onClick="Back">Back</Button></BottomLeft>
            <BottomRight><Button onClick="Next">Start</Button></BottomRight>
        </AssistantPage>
        break;

    case 6:
        <AssistantPage>
            <Title>Migration</Title>
            <Body>
                Running... (Not really at the moment)
            </Body>
            <Bottom><Button onClick="Cancel">Cancel</Button></Bottom>
        </AssistantPage>
        break;
}

@code {

    App app => App.Instance;
    Config.BC bc => Config.Instance.bc;

    int step = 1;

    bool hasConnectionToRemoteMachine;

    class Service
    {
        public string Name { get; set; }
        public string ServiceType { get; set; }
        public string ServiceName { get; set; }
        public string DisplayName { get; set; }
        public string StartType { get; set; }
        public string Status { get; set; }
    }
    readonly List<Service> services = new();

    protected override void OnInitialized()
    {
        app.components.menu.RenderLater();
    }

    void Back()
    {
        step--;
        this.RenderLater();
    }

    void Next()
    {
        step++;
        this.RenderLater();
    }

    async Task ConnectToRemoteMachineAsync()
    {
        await app.IncreaseBusinessAsync();

        Logger.Pending("Connecting");

        var hostname = await bc.remoteMachine.GetStringAsync("{ hostname }");

        if (!string.IsNullOrEmpty(hostname))
        {
            hasConnectionToRemoteMachine = true;
            Logger.Success("Connection established");
        }
        else
        {
            DisconnectFromRemoteMachine();
        }

        this.RenderLater();

        await app.DecreaseBusinessAsync();
    }

    void DisconnectFromRemoteMachine()
    {
        if (hasConnectionToRemoteMachine)
        {
            hasConnectionToRemoteMachine = false;
            Logger.Info("Disconnected");
        }
        this.RenderLater();
    }

    async Task GetServicesFromRemoteMachine()
    {
        await app.IncreaseBusinessAsync();

        services.Clear();
        this.RenderLater();

        var result = await bc.remoteMachine.RunScriptAsync("{ Get-Service }");
        foreach (var service in result.returnValue.Cast<Service>())
            services.Add(service);

        this.RenderLater();

        await app.DecreaseBusinessAsync();
    }

    void Cancel()
    {
        step = 2;
        DisconnectFromRemoteMachine();
    }

}
