<AssistantPage>
    <Title>BC Instances<span>@PowerShellSessionManager.DefaultSession.ToMarkupString()</span></Title>
    <Body>
        <div data-group="Instances">
            <div class="field">
                <label>Name of <span style="color: rosybrown; ">old instance</span></label>
                <Input @bind-value="Config.Instance.bc.oldInstanceName" />
            </div>
            <div class="field">
                <label>Name of <span style="color: greenyellow; ">new instance</span></label>
                <Input @bind-value="Config.Instance.bc.newInstanceName" />
            </div>
        </div>
        <div data-group="Nav Admin Tools"
            <div>
                <Button onClickAsync="FindNavAdminTools">Find All</Button>
            </div>
            <div>
                @foreach (var navAdminTool in serverInstances.Keys)
                {
                    <Button onClickAsync="() => GetServerInstances(navAdminTool)">
                        @navAdminTool[(NAV_FOLDER.Length + 1)..]
                    </Button>
                    <ul>
                        @foreach (var serverInstance in serverInstances[navAdminTool])
                        {
                            <li>@serverInstance</li>
                        }
                    </ul>
                }
            </div>
        </div>
        <div>
            <p>Test</p>
            <p>Test</p>
            <p>Test</p>
            <p>Test</p>
            <p>Test</p>
        </div>
    </Body>
    <BottomLeft><Button onClick="Back">Back</Button></BottomLeft>
    <BottomRight><Button onClick="Next" isEnabled="false">Next</Button></BottomRight>
</AssistantPage>

@code {

    const string NAV_FOLDER = @"C:\Program Files\Microsoft Dynamics 365 Business Central";

    [Parameter] public Action onBack { get; set; }
    [Parameter] public Action onNext { get; set; }

    readonly Dictionary<string, List<string>> serverInstances = new();

    async Task FindNavAdminTools()
    {
        await App.Instance.IncreaseBusinessAsync();

        serverInstances.Clear();

        var items = await PowerShellSessionManager.DefaultSession.GetObjectListAsync(
            $@"{{ Get-ChildItem -Path ""{NAV_FOLDER}"" -Recurse -Filter ""NavAdminTool.ps1"" }}"
        );

        foreach (dynamic item in items)
        {
            serverInstances.Add(item.FullName as string, new());
        }

        await App.Instance.DecreaseBusinessAsync();
    }

    async Task GetServerInstances(string navAdminTool)
    {
        await App.Instance.IncreaseBusinessAsync();

        var serverInstances = this.serverInstances[navAdminTool];

        serverInstances.Clear();

        var session = PowerShellSessionManager.GetSession(navAdminTool);

        var result = await session.RunScriptAsync("{ Get-NAVServerInstance }");
        var serviceInstances = result.returnValue
            .Select(x => (x as dynamic).ServerInstance as string)
            .Select(x => x.Split('$', 2).LastOrDefault())
            .ToList();

        serverInstances.AddRange(serviceInstances);

        await App.Instance.DecreaseBusinessAsync();
    }

    void Back()
    {
        onBack?.Invoke();
    }

    void Next()
    {
        onNext?.Invoke();
    }

}
