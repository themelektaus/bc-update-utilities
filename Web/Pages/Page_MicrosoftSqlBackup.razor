<AssistantPage>
    <Title>Microsoft SQL Backup<span>@session?.ToMarkupString()</span></Title>
    <Body>
        @if (sqlServer.dataFolder is null)
        {
            <div class="loading"></div>
            return;
        }
        <p>There isn't any description on this page yet.</p>
        @if (sqlServer.backupFileNames.Count > 0)
        {
            <div class="table microsoft-sql-backups">
                <div class="table-section table-section-header">
                    <div>
                        <div>Filename</div>
                        <div></div>
                    </div>
                </div>
                <div class="table-section table-section-content">
                    @foreach (var backupFileName in sqlServer.backupFileNames)
                    {
                        <div class="microsoft-sql-backup">
                            <div>@backupFileName</div>
                            <div>
                                <Button styleClass="negative" onClickAsync="() => Delete(backupFileName)">
                                    Delete
                                </Button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        <style>
            .microsoft-sql-backups .table-section > div {
                grid-template-columns: 1fr auto;
            }
        </style>
        <Button onClickAsync="Backup" isEnabled="sqlServer.dataFolder is not null">Backup</Button>
    </Body>
    <BottomLeft><Button onClick="Back">Back</Button></BottomLeft>
    <BottomRight><Button onClick="Next" isEnabled="sqlServer.backupFileNames.Count > 0">Next</Button></BottomRight>
</AssistantPage>

@code {

    static Config.BC.RemoteMachine.ServerInstance.SqlServer sqlServer
        => Config.Instance.bc.remoteMachine.oldServerInstance.sqlServer;

    [Parameter] public Action onBack { get; set; }
    [Parameter] public Action onNext { get; set; }

    PowerShellSession session;

    protected override async Task OnInitializedAsync()
    {
        await App.Instance.IncreaseBusinessAsync();

        session = await sqlServer.serverInstance.remoteMachine.GetSessionAsync();

        await FetchBackupFilesAsync();

        await App.Instance.DecreaseBusinessAsync();
    }

    async Task FetchBackupFilesAsync()
    {
        if (sqlServer.databaseNames.Count > 0)
        {
            await App.Instance.IncreaseBusinessAsync();

            await sqlServer.FetchBackupFilesAsync();

            await App.Instance.DecreaseBusinessAsync();
        }
    }

    async Task Backup()
    {
        await App.Instance.IncreaseBusinessAsync();

        var backupFileName = $"{sqlServer.database}-{DateTime.Now.Ticks}.bak";
        var backupFile = System.IO.Path.Combine(sqlServer.dataFolder, backupFileName);

        var command = sqlServer.GenerateCommand(
            $"Backup-SqlDatabase -Database \"{sqlServer.database}\" -BackupFile \"{backupFile}\"",
            useCredentialArg: true
        );

        await session.RunScriptAsync(
            command.scriptText,
            command.sensitiveArgs,
            convertToJson: true
        );

        await FetchBackupFilesAsync();

        await App.Instance.DecreaseBusinessAsync();
    }

    async Task Delete(string backupFileName)
    {
        await App.Instance.IncreaseBusinessAsync();

        var backupFile = System.IO.Path.Combine(sqlServer.dataFolder, backupFileName);

        string[] lines = [
            "EXEC sp_configure ''show advanced options'', 1",
            "RECONFIGURE",
            "EXEC sp_configure ''xp_cmdshell'', 1",
            "RECONFIGURE",
            $"EXEC xp_cmdshell ''del \"{backupFile}\"''",
            "EXEC sp_configure ''xp_cmdshell'', 0",
            "RECONFIGURE",
            "EXEC sp_configure ''show advanced options'', 0",
            "RECONFIGURE",
        ];

        foreach (var line in lines)
        {
            var command = sqlServer.GenerateCommand($"Invoke-Sqlcmd -Query '{line}'");

            await session.RunScriptAsync(
                command.scriptText,
                command.sensitiveArgs,
                convertToJson: true
            );
        }

        await FetchBackupFilesAsync();

        await App.Instance.DecreaseBusinessAsync();
    }

    void Back()
    {
        onBack?.Invoke();
    }

    void Next()
    {
        onNext?.Invoke();
    }

}
