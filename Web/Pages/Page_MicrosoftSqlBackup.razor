<AssistantPage>
    <Title>Microsoft SQL Backup<span>@PowerShellSessionManager.DefaultSession.ToMarkupString()</span></Title>
    <Body>
        @if (!ready)
        {
            <div class="loading"></div>
            return;
        }
        <p>There isn't any description on this page yet.</p>
        @if (backupFileNames.Count > 0)
        {
            <div class="table microsoft-sql-backups">
                <div class="table-section table-section-header">
                    <div>
                        <div>Filename</div>
                        <div></div>
                    </div>
                </div>
                <div class="table-section table-section-content">
                    @foreach (var backupFileName in backupFileNames)
                    {
                        <div class="microsoft-sql-backup">
                            <div>@backupFileName</div>
                            <div>
                                <Button styleClass="negative" onClickAsync="() => Delete(backupFileName)">
                                    Delete
                                </Button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        <style>
            .microsoft-sql-backups .table-section > div {
                grid-template-columns: 1fr auto;
            }
        </style>
        <Button onClickAsync="Backup" isEnabled="dataFolder is not null">Backup</Button>
    </Body>
    <BottomLeft><Button onClick="Back">Back</Button></BottomLeft>
    <BottomRight><Button onClick="Next" isEnabled="backupFileNames.Count > 0">Next</Button></BottomRight>
</AssistantPage>

@code {

    static Config.MSSQL mssql => Config.Instance.mssql;

    [Parameter] public Action onBack { get; set; }
    [Parameter] public Action onNext { get; set; }

    bool ready;
    string dataFolder;
    readonly List<string> backupFileNames = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshAsync();
    }

    async Task RefreshAsync()
    {
        ready = false;
        dataFolder = null;
        backupFileNames.Clear();

        await App.Instance.IncreaseBusinessAsync();

        var session = PowerShellSessionManager.DefaultSession;

        var command = mssql.GenerateCommand(
            "Invoke-Sqlcmd -Query "
                + "\""
                + "SELECT [filename] FROM [master].[sys].[sysfiles] "
                + "WHERE [name] = 'master'"
                + "\""
        );

        var result = await session.RunScriptAsync(command.scriptText, command.sensitiveArgs);

        var firstValue = result.returnValue?.FirstOrDefault();

        if (firstValue is not null)
        {
            string filename = (firstValue as dynamic).filename;
            if (filename is not null)
            {
                dataFolder = new System.IO.FileInfo(filename).DirectoryName;

                command = mssql.GenerateCommand(
                    $"Invoke-Sqlcmd -Query \"EXEC xp_dirtree '{dataFolder}', 2, 1\""
                );

                result = await session.RunScriptAsync(command.scriptText, command.sensitiveArgs);

                foreach (var @object in result.returnValue)
                {
                    var x = @object as dynamic;
                    if (x.file == 1)
                    {
                        string fileName = x.subdirectory;
                        if (fileName.StartsWith(mssql.database) && fileName.EndsWith(".bak"))
                        {
                            backupFileNames.Add(fileName);
                        }
                    }
                }
            }
        }

        ready = true;

        await App.Instance.DecreaseBusinessAsync();
    }

    async Task Backup()
    {
        await App.Instance.IncreaseBusinessAsync();

        var backupFileName = $"{mssql.database}-{DateTime.Now.Ticks}.bak";
        var backupFile = System.IO.Path.Combine(dataFolder, backupFileName);

        var command = mssql.GenerateCommand(
            $"Backup-SqlDatabase -Database \"{mssql.database}\" -BackupFile \"{backupFile}\"",
            useCredentialArg: true
        );

        await PowerShellSessionManager.DefaultSession.RunScriptAsync(
            command.scriptText,
            command.sensitiveArgs,
            convertToJson: true
        );

        await RefreshAsync();

        await App.Instance.DecreaseBusinessAsync();
    }

    async Task Delete(string backupFileName)
    {
        await App.Instance.IncreaseBusinessAsync();

        var backupFile = System.IO.Path.Combine(dataFolder, backupFileName);

        string[] lines = [
            "EXEC sp_configure ''show advanced options'', 1",
            "RECONFIGURE",
            "EXEC sp_configure ''xp_cmdshell'', 1",
            "RECONFIGURE",
            $"EXEC xp_cmdshell ''del \"{backupFile}\"''",
            "EXEC sp_configure ''xp_cmdshell'', 0",
            "RECONFIGURE",
            "EXEC sp_configure ''show advanced options'', 0",
            "RECONFIGURE",
        ];

        foreach (var line in lines)
        {
            var command = mssql.GenerateCommand($"Invoke-Sqlcmd -Query '{line}'");

            await PowerShellSessionManager.DefaultSession.RunScriptAsync(
                command.scriptText,
                command.sensitiveArgs,
                convertToJson: true
            );
        }

        await RefreshAsync();

        await App.Instance.DecreaseBusinessAsync();
    }

    void Back()
    {
        onBack?.Invoke();
    }

    void Next()
    {
        onNext?.Invoke();
    }

}
