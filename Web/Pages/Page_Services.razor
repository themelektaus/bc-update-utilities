@inherits PageWithSession

<AssistantPage isLoading="!isInitialized">
    <Title>
        Services
        <span>@session?.ToMarkupString()</span>
    </Title>
    <Body>
        <div class="table services">
            <InputSearch @bind-value="searchText" />
            <div class="table-section table-section-header">
                <div>
                    <div>Name</div>
                    <div>Title</div>
                    <div>Start Type</div>
                    <div>Status</div>
                    <div></div>
                </div>
            </div>
            <div class="table-section table-section-content">
                @foreach (var service in GetServices())
                {
                    <div class="service">
                        <div>@service.Name</div>
                        <div>@service.DisplayName</div>
                        <div data-start-type="@service.StartType"></div>
                        <div data-status="@service.Status"></div>
                        <div style="display: flex; gap: .25em; ">
                            @if (service.StartType == "Disabled")
                            {
                                <Button isEnabled="false">Start</Button>
                            }
                            else
                            {
                                <Button onClickAsync="() => StartService(service)"
                                        styleClass="@(service.isStartable || service.isStoppable ? "positive" : "")"
                                        isEnabled="service.isStartable">
                                    Start
                                </Button>
                            }
                            <Button onClickAsync="() => StopService(service)"
                                    styleClass="@(service.isStartable || service.isStoppable ? "negative" : "")"
                                    isEnabled="service.isStoppable">
                                Stop
                            </Button>
                        </div>
                    </div>
                }
            </div>
        </div>
        <style>
            .services .table-section > div {
                grid-template-columns: 2fr 3fr 1fr 1fr 9em;
            }
        </style>
    </Body>
</AssistantPage>

@code {

    List<Service> services;

    string searchText = string.Empty;

    bool IsEnabled_Start(Service service)
    {
        return service.StartType != "Disabled" && service.Status == "Stopped";
    }

    bool IsStartEnabled(Service service)
    {
        return service.StartType != "Disabled" && service.Status == "Stopped";
    }

    IEnumerable<Service> GetServices()
    {
        if (!searchText.IsValidPattern(out var ignoreCase))
        {
            return [];
        }

        return services.Where(x =>
        {
            if (x.Name.SearchMatch(searchText, ignoreCase))
                return true;

            if (x.DisplayName.SearchMatch(searchText, ignoreCase))
                return true;

            if (x.StartType.SearchMatch(searchText, ignoreCase))
                return true;

            if (x.Status.SearchMatch(searchText, ignoreCase))
                return true;

            return false;
        });
    }

    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();

        var result = await session.RunScriptAsync("Get-Service");

        services = new();
        foreach (var x in result.returnValue)
            services.Add(Service.From(x));
    }

    Task StartService(Service service) => Run(async () =>
    {
        await session.RunScriptAsync(
            scriptText: "param($service) Start-Service $service",
            scriptOptions: new() { argumentList = [service.Object] }
        );

        await RefreshService(service);
    });

    Task StopService(Service service) => Run(async () =>
    {
        await session.RunScriptAsync(
            scriptText: "param($service) Stop-Service $service -Force",
            scriptOptions: new() { argumentList = [service.Object] }
        );

        await RefreshService(service);
    });

    async Task RefreshService(Service service)
    {
        var script = new PowerShellSession.Script
        {
            text = "param($service) Get-Service $service",
            options = new() { argumentList = [service.Object] }
        };

        var serviceObject = await session.GetObjectAsync(script);

        if (serviceObject is not null)
        {
            var name = serviceObject.Get<string>("Name");
            var existingService = services.FirstOrDefault(x => x.Name == name);
            if (existingService is not null)
            {
                existingService.Object = serviceObject;
                existingService.Status = serviceObject.Get<string>("Status");
            }
        }
    }

}
