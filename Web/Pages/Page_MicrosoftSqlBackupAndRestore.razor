<AssistantPage>
    <Title>Microsoft SQL Backup &amp; Restore<span>@session?.ToMarkupString()</span></Title>
    <Body>
        @if (!initialized)
        {
            <div class="loading"></div>
            return;
        }
        
        <MicrosoftSqlConnectionDatabase sqlServer="sqlServer" onChange="OnChange" />

        <Button onClickAsync="Backup" isEnabled="sqlServer.dataFolder is not null">Backup</Button>

        @if (sqlServer.backupFileNames.Count > 0)
        {
            <div data-group="Destination Database">
                <div class="field">
                    <label>Name</label>
                    <Input @bind-value="sqlServer.newDatabase" />
                </div>
            </div>

            <div class="table microsoft-sql-backups">
                <div class="table-section table-section-header">
                    <div>
                        <div>Filename</div>
                        <div></div>
                    </div>
                </div>
                <div class="table-section table-section-content">
                    @foreach (var backupFileName in sqlServer.backupFileNames)
                    {
                        <div class="microsoft-sql-backup">
                            <div>@backupFileName</div>
                            <div>
                                <Button styleClass="positive" onClickAsync="() => Restore(backupFileName)" isEnabled="sqlServer.newDatabase != string.Empty">
                                    Restore
                                </Button>
                                <Button styleClass="negative" onClickAsync="() => Delete(backupFileName)">
                                    Delete
                                </Button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        <style>
            .microsoft-sql-backups .table-section > div {
                grid-template-columns: 1fr auto;
            }
        </style>

    </Body>
    <BottomLeft><Button onClick="Back">Back</Button></BottomLeft>
    <BottomRight><Button onClick="Next" isEnabled="sqlServer.backupFileNames.Count > 0 && sqlServer.newDatabase != string.Empty">Next</Button></BottomRight>
</AssistantPage>

@using Path = System.IO.Path

@code {

    static Config.BC.RemoteMachine.SqlServer sqlServer
        => Config.Instance.bc.remoteMachine.sqlServer;

    [Parameter] public Action onBack { get; set; }
    [Parameter] public Action onNext { get; set; }

    PowerShellSession session;

    bool initialized;

    protected override async Task OnInitializedAsync()
    {
        await App.Instance.IncreaseBusinessAsync();

        session = await sqlServer.remoteMachine.GetSessionAsync();

        await sqlServer.FetchBackupFilesAsync();

        await App.Instance.DecreaseBusinessAsync();

        initialized = true;
    }

    async Task OnChange()
    {
        await App.Instance.IncreaseBusinessAsync();
        
        await sqlServer.FetchBackupFilesAsync();

        await App.Instance.DecreaseBusinessAsync();
    }

    async Task Backup()
    {
        await App.Instance.IncreaseBusinessAsync();

        var backupFileName = $"{sqlServer.oldDatabase}-{DateTime.Now.Ticks}.bak";
        var backupFile = Path.Combine(sqlServer.dataFolder, backupFileName);

        var command = sqlServer.GenerateCommand(
            $"Backup-SqlDatabase -Database \"{sqlServer.oldDatabase}\" -BackupFile \"{backupFile}\"",
            useCredentialArg: true
        );

        await session.RunScriptAsync(
            command.scriptText,
            command.sensitiveArgs,
            convertToJson: true
        );

        await sqlServer.FetchBackupFilesAsync();

        await App.Instance.DecreaseBusinessAsync();
    }
    
    async Task Restore(string backupFileName)
    {
        await App.Instance.IncreaseBusinessAsync();

        (string scriptText, object[] sensitiveArgs) command;

        command = sqlServer.GenerateCommand(
            text: $@"Invoke-Sqlcmd -Query ""ALTER DATABASE [{sqlServer.newDatabase}] SET OFFLINE WITH ROLLBACK IMMEDIATE""",
            useCredentialArg: true
        );

        await session.RunScriptAsync(
            command.scriptText,
            command.sensitiveArgs
        );

        var backupFile = Path.Combine(sqlServer.dataFolder, backupFileName);

        command = sqlServer.GenerateCommand(
            text: $@"Invoke-Sqlcmd -Query ""RESTORE FILELISTONLY FROM DISK = N'{backupFile}' WITH NOUNLOAD""",
            suffix: "| Select -Property LogicalName, PhysicalName",
            useCredentialArg: true
        );

        var objects = await session.GetObjectListAsync(
            command.scriptText,
            command.sensitiveArgs
        );

        var files = new List<(string name, string path)>();

        foreach (dynamic @object in objects)
        {
            var extension = Path.GetExtension(@object.PhysicalName).ToLower();
            files.Add((
                @object.LogicalName,
                Path.Combine(sqlServer.dataFolder, sqlServer.newDatabase + extension)
            ));
        }

        var newObject = "New-Object Microsoft.SqlServer.Management.Smo.RelocateFile";

        var relocateFileArg = new List<string>();
        var scriptText = new System.Text.StringBuilder();

        for (var i = 0; i < files.Count; i++)
        {
            var variableName = $"${nameof(relocateFileArg)}{i}";
            var args = $"\"{files[i].name}\", \"{files[i].path}\"";
            relocateFileArg.Add(variableName);
            scriptText.AppendLine($"{variableName} = {newObject}({args})");
        }

        await session.RunScriptAsync(scriptText.ToString());

        command = sqlServer.GenerateCommand(
            $"Restore-SqlDatabase -Database \"{sqlServer.newDatabase}\" -BackupFile \"{backupFile}\""
                + $" -RelocateFile @({string.Join(',', relocateFileArg)}) -ReplaceDatabase",
            useCredentialArg: true
        );

        await session.RunScriptAsync(
            command.scriptText,
            command.sensitiveArgs,
            convertToJson: true
        );

        await App.Instance.DecreaseBusinessAsync();
    }

    async Task Delete(string backupFileName)
    {
        await App.Instance.IncreaseBusinessAsync();

        var backupFile = System.IO.Path.Combine(sqlServer.dataFolder, backupFileName);

        string[] lines = [
            "EXEC sp_configure ''show advanced options'', 1",
            "RECONFIGURE",
            "EXEC sp_configure ''xp_cmdshell'', 1",
            "RECONFIGURE",
            $"EXEC xp_cmdshell ''del \"{backupFile}\"''",
            "EXEC sp_configure ''xp_cmdshell'', 0",
            "RECONFIGURE",
            "EXEC sp_configure ''show advanced options'', 0",
            "RECONFIGURE",
        ];

        foreach (var line in lines)
        {
            var command = sqlServer.GenerateCommand($"Invoke-Sqlcmd -Query '{line}'");

            await session.RunScriptAsync(
                command.scriptText,
                command.sensitiveArgs,
                convertToJson: true
            );
        }

        await sqlServer.FetchBackupFilesAsync();

        await App.Instance.DecreaseBusinessAsync();
    }

    void Back()
    {
        onBack?.Invoke();
    }

    void Next()
    {
        onNext?.Invoke();
    }

}
