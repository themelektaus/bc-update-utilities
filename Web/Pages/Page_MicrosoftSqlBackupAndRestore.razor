@using Path = System.IO.Path

@inherits PageWithSession

<AssistantPage>
    <Title>
        Microsoft SQL Backup &amp; Restore
        <span>@session?.ToMarkupString()</span>
    </Title>
    <Body>
        @if (!isInitialized)
        {
            <Loading />
            return;
        }

        <MicrosoftSqlConnectionDatabase onChange="OnChange" />

        <Button onClickAsync="Backup"
                isEnabled="sqlServer.oldDatabase != string.Empty">
            Backup
        </Button>

        @if (sqlServer.backupFileNames.Count > 0)
        {
            <div data-group="Destination Database">
                <div class="field">
                    <label>Name</label>
                    <Input @bind-value="sqlServer.newDatabase" />
                </div>
            </div>

            <div class="table microsoft-sql-backups">
                <div class="table-section table-section-header">
                    <div>
                        <div>Filename</div>
                        <div></div>
                    </div>
                </div>
                <div class="table-section table-section-content">
                    @foreach (var backupFileName in sqlServer.backupFileNames)
                    {
                        <div class="microsoft-sql-backup">
                            <div>@backupFileName</div>
                            <div>
                                <Button styleClass="positive"
                                        onClickAsync="() => Restore(backupFileName)"
                                        isEnabled="sqlServer.newDatabase != string.Empty">
                                    Restore
                                </Button>
                                <Button styleClass="negative"
                                        onClickAsync="() => Delete(backupFileName)">
                                    Delete
                                </Button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        <style>
            .microsoft-sql-backups .table-section > div {
                grid-template-columns: 1fr auto;
            }
        </style>

    </Body>
    <BottomLeft>
        <Button onClickAsync="GotoAsync<Page_MicrosoftSqlConnection>">
            Back
        </Button>
    </BottomLeft>
    <BottomRight>
        <Button onClickAsync="GotoAsync<Page_BusinessCentralOldServerInstance>"
                isEnabled="isNextEnabled">
            Next
        </Button>
    </BottomRight>
</AssistantPage>

@code {

    bool isNextEnabled
        => sqlServer.backupFileNames.Count > 0
        && sqlServer.newDatabase != string.Empty;

    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();

        await sqlServer.FetchBackupFilesAsync();
    }

    Task OnChange() => Run(async () =>
    {
        await OnInitAsync();
    });

    Task Backup() => Run(async () =>
    {
        var backupFileName = $"{sqlServer.oldDatabase}-{DateTime.Now.Ticks}.bak";
        var backupFile = Path.Combine(sqlServer.dataFolder, backupFileName);

        var script = sqlServer.GenerateScript(
            $"Backup-SqlDatabase -Database \"{sqlServer.oldDatabase}\" -BackupFile \"{backupFile}\"",
            useCredentialArg: true
        );

        script.options.convertToJson = true;

        await session.RunScriptAsync(script);

        await sqlServer.FetchBackupFilesAsync();
    });

    Task Restore(string backupFileName) => Run(async () =>
    {
        var script = sqlServer.GenerateScript(
            text: $@"Invoke-Sqlcmd -Query ""ALTER DATABASE [{sqlServer.newDatabase}] SET OFFLINE WITH ROLLBACK IMMEDIATE""",
            useCredentialArg: true
        );

        await session.RunScriptAsync(script);

        var backupFile = Path.Combine(sqlServer.dataFolder, backupFileName);

        script = sqlServer.GenerateScript(
            text: $@"Invoke-Sqlcmd -Query ""RESTORE FILELISTONLY FROM DISK = N'{backupFile}' WITH NOUNLOAD""",
            suffix: "| Select -Property LogicalName, PhysicalName",
            useCredentialArg: true
        );

        var objects = await session.GetObjectListAsync(script);

        var files = new List<(string name, string path)>();

        foreach (dynamic @object in objects)
        {
            var extension = Path.GetExtension(@object.PhysicalName).ToLower();
            files.Add((
                @object.LogicalName,
                Path.Combine(sqlServer.dataFolder, sqlServer.newDatabase + extension)
            ));
        }

        var newObject = "New-Object Microsoft.SqlServer.Management.Smo.RelocateFile";

        var relocateFileArg = new List<string>();
        var scriptText = new System.Text.StringBuilder();

        for (var i = 0; i < files.Count; i++)
        {
            var variableName = $"${nameof(relocateFileArg)}{i}";
            var args = $"\"{files[i].name}\", \"{files[i].path}\"";
            relocateFileArg.Add(variableName);
            scriptText.AppendLine($"{variableName} = {newObject}({args})");
        }

        await session.RunScriptAsync(scriptText.ToString());

        script = sqlServer.GenerateScript(
            $"Restore-SqlDatabase -Database \"{sqlServer.newDatabase}\" -BackupFile \"{backupFile}\""
                + $" -RelocateFile @({string.Join(',', relocateFileArg)}) -ReplaceDatabase",
            useCredentialArg: true
        );

        script.options.convertToJson = true;

        await session.RunScriptAsync(script);
    });

    Task Delete(string backupFileName) => Run(async () =>
    {
        var backupFile = Path.Combine(sqlServer.dataFolder, backupFileName);

        string[] lines = [
            "EXEC sp_configure ''show advanced options'', 1",
            "RECONFIGURE",
            "EXEC sp_configure ''xp_cmdshell'', 1",
            "RECONFIGURE",
            $"EXEC xp_cmdshell ''del \"{backupFile}\"''",
            "EXEC sp_configure ''xp_cmdshell'', 0",
            "RECONFIGURE",
            "EXEC sp_configure ''show advanced options'', 0",
            "RECONFIGURE",
        ];

        foreach (var line in lines)
        {
            var script = sqlServer.GenerateScript($"Invoke-Sqlcmd -Query '{line}'");
            script.options.convertToJson = true;
            await session.RunScriptAsync(script);
        }

        await sqlServer.FetchBackupFilesAsync();
    });

}
