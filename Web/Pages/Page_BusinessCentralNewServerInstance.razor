@inherits PageWithSession

<AssistantPage isLoading="!isInitialized">
    <Title>
        Business Central: New Server Instance
        <span>@session?.ToMarkupString()</span>
    </Title>
    <Body>
        <BusinessCentralServerInstance groupTitle="New Server Instance"
                                       serverInstance="newServerInstance"
                                       onChange="this.RenderLater"
                                       creationMode="true" />
        <div style="display: flex; gap: .5em; margin: auto; ">
            <Button onClickAsync="Delete" styleClass="negative" isEnabled="skip">
                Delete
            </Button>
        </div>
    </Body>
    <BottomLeft>
        <Button onClickAsync="GotoAsync<Page_BusinessCentralOldServerInstance>">
            Back
        </Button>
    </BottomLeft>
    <BottomRight>
        @if (skip)
        {
            <Button onClickAsync="GotoAsync<Page_MicrosoftSqlCompatibilityLevel>" isEnabled="isNextEnabled">
                Skip
            </Button>
        }
        else
        {
            <Button onClickAsync="Create" styleClass="positive" isEnabled="isNextEnabled">
                Create
            </Button>
        }
    </BottomRight>
</AssistantPage>

@code {

    static Config_ServerInstance newServerInstance
        => remoteMachine.newServerInstance;

    bool isNextEnabled
        => newServerInstance.navAdminTool != string.Empty
        && newServerInstance.name != string.Empty;

    bool skip
        => newServerInstance.allNames.Contains(newServerInstance.name);

    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();

        if (remoteMachine.navAdminTools.Count == 0)
        {
            await remoteMachine.FetchNavAdminToolsAsync();
        }

        this.RenderLater();
    }

    Task Create() => Run(async () =>
    {
        await NewServerAsync();
        await NewWebServerAsync();
        await GotoAsync<Page_MigrateServerConfig>();
    });

    Task Delete() => Run(async () =>
    {
        await RemoveServerAsync();
        await RemoveWebServerAsync();
        await newServerInstance.FetchServerInstanceNamesAsync();
    });

    Task NewServerAsync() => Run(async () =>
    {
        var session = await newServerInstance.GetNavSessionAsync();
        await session.RunScriptAsync(ScriptText_NewServer());
    });

    Task RemoveServerAsync() => Run(async () =>
    {
        var session = await newServerInstance.GetNavSessionAsync();
        await session.RunScriptAsync(ScriptText_RemoveServer());
    });

    Task NewWebServerAsync() => Run(async () =>
    {
        var session = await newServerInstance.GetNavSessionAsync();
        await session.RunScriptAsync(ScriptText_NewWebServer());
    });

    Task RemoveWebServerAsync() => Run(async () =>
    {
        var session = await newServerInstance.GetNavSessionAsync();
        await session.RunScriptAsync(ScriptText_RemoveWebServer());
    });

    string ScriptText_NewServer()
    {
        var scriptText = new System.Text.StringBuilder($"New-NAVServerInstance \"{newServerInstance.name}\"");

        var host = sqlServer.hostname.Split('\\', 2, StringSplitOptions.RemoveEmptyEntries);

        if (host.Length == 2)
        {
            scriptText.Append($" -DatabaseServer \"{host[0]}\"");
            scriptText.Append($" -DatabaseInstance \"{host[1]}\"");
        }
        else
        {
            scriptText.Append($" -DatabaseServer \"{sqlServer.hostname}\"");
        }

        scriptText.Append($" -DatabaseName \"{sqlServer.newDatabase}\"");

        var keys = new[]
        {
            "ClientServicesPort",
            "DeveloperServicesPort",
            "ManagementServicesPort",
            "ODataServicesPort",
            "SnapshotDebuggerServicesPort",
            "SOAPServicesPort"
        };

        var oldServerConfig = remoteMachine.oldServerInstance.serverConfig;

        foreach (var key in keys)
        {
            var configEntry = oldServerConfig.entries.FirstOrDefault(x => x.key == key);

            if (configEntry is not null)
            {
                scriptText.Append($" -{key} {configEntry.value}");
            }
        }

        return scriptText.ToString();
    }

    string ScriptText_RemoveServer()
    {
        return "Remove-NAVServerInstance"
            + $" -ServerInstance \"{newServerInstance.name}\""
            + $" -Force";
    }

    string ScriptText_NewWebServer()
    {
        return "New-NAVWebServerInstance"
            + $" -WebServerInstance {newServerInstance.name}"
            + $" -ServerInstance {newServerInstance.name}"
            + $" -Server {remoteMachine.Hostname}"
            + $" -DnsIdentity {remoteMachine.Hostname}";
    }

    string ScriptText_RemoveWebServer()
    {
        return "Remove-NAVWebServerInstance"
            + $" -WebServerInstance {newServerInstance.name}";
    }

}
