<AssistantPage>
    <Title>Business Central: Server Configuration<span>@session?.ToMarkupString()</span></Title>
    <Body>
        <BusinessCentralServerConfiguration serverInstance="remoteMachine.oldServerInstance" />
        <BusinessCentralServerConfiguration serverInstance="remoteMachine.newServerInstance" />
    </Body>
    <BottomLeft>
        <Button isEnabled="false">
            Back
        </Button>
    </BottomLeft>
    <Bottom>
        <Button isEnabled="false">
            Apply
        </Button>
    </Bottom>
    <BottomRight>
        <Button isEnabled="false">
            Next
        </Button>
    </BottomRight>
</AssistantPage>

@code {

    static Config.BC.RemoteMachine remoteMachine
        => Config.Instance.bc.remoteMachine;

    PowerShellSession session;

    protected override async Task OnInitializedAsync()
    {
        await App.Instance.IncreaseBusinessAsync();

        session = await remoteMachine.GetSessionAsync();

        await App.Instance.DecreaseBusinessAsync();
    }

    static void TransferBaseConfiguration(
    BusinessCentralServerConfiguration from,
        BusinessCentralServerConfiguration to
    )
    {
        var fromEntries = from.GetAllEntries();
        var toEntries = to.GetAllEntries();

        foreach (var key in new string[]
        {
            "DatabaseServer",
            "DatabaseInstance",
            "ServicesCertificateThumbprint",
            "ServicesCertificateValidationEnabled",
            "PublicWebBaseUrl",
            "ExtensionAllowedTargetLevel",
            "ExtendedSecurityTokenLifetime",
            "DisableTokenSigningCertificateValidation",
            "ClientServicesCredentialType",
            "UIElementRemovalOption",
            "ClientServicesPort",
        })
        {
            var fromEntry = fromEntries.FirstOrDefault(x => x.key == key);
            var toEntry = toEntries.FirstOrDefault(x => x.key == key);
            toEntry.newValue = fromEntry.newValue;
        }
    }

    static void LoadSslConfiguration(BusinessCentralServerConfiguration configuration)
    {
        var entries = configuration.GetAllEntries();

        foreach (var keyValuePair in new string[][] {
            [ "ClientServicesSSLEnabled", "True" ],
            [ "SOAPServicesSSLEnabled", "True" ],
            [ "ODataServicesSSLEnabled", "True" ],
            [ "ODataServicesEnabled", "True" ]
    })
        {
            var entry = entries.FirstOrDefault(x => x.key == keyValuePair[0]);
            entry.newValue = keyValuePair[1];
        }
    }

}
